plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

group = project.plugin_group
archivesBaseName = project.plugin_name
version = project.plugin_version

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'lumine'
        url = 'https://mvn.lumine.io/repository/maven-public/'
    }
    maven {
        name = 'minecraft-repo'
        url = 'https://libraries.minecraft.net/'
    }
    // anvilgui
    maven {
        name = 'codemc'
        url = 'https://repo.codemc.io/repository/maven-snapshots/'
    }
    maven {
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven { url "https://jitpack.io" }
}

configurations {
    provided
    compile.extendsFrom provided
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:${project.spigot_version}"
    shadow 'net.wesjd:anvilgui:1.10.2-SNAPSHOT'
    //implementation "com.mojang:authlib:3.16.29" //1.5.21" // http://nathaantfm.alwaysdata.net/explorer/?package=com.mojang&name=authlib
    implementation "com.mojang:authlib:1.5.21"
    compileOnly 'me.clip:placeholderapi:2.11.6'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
}

def targetJavaVersion = 11
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.withType(Jar) {
    destinationDirectory = file("${System.getProperty('user.home')}/MinecraftDev/paper_1.21.1/plugins/")
}

shadowJar {
    configurations = [project.configurations.shadow]
    archiveFileName = project.plugin_name + ".jar"
    exclude('META-INF/')
    exclude('META-INF/**')
    exclude('**/AnvilGUI$1.class')
    exclude('**/AnvilGUI$Builder.class')
    exclude('**/AnvilGUI$ListenUp.class')
    exclude('**/AnvilGUI$Response.class')
    exclude('**/AnvilGUI$Slot.class')
    exclude('**/AnvilGUI.class')

    exclude('META-INF/MANIFEST.MF')
}

jar {
    onlyIf { !sourceSets.main.allSource.files.isEmpty() }
    archiveFileName = project.plugin_name + ".jar"
}

build.dependsOn(shadowJar)

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('config.yml') {
        expand props
    }
    filesMatching('plugin.yml') {
        expand props
    }
    //filesMatching('colors.yml') {
        //expand props
    //}
}
